#+TITLE: SSER Village Survey Database: Instructions for Data Users
#+OPTIONS: toc:nil ^:{} H:1
#+PROPERTY: header-args:R :session haryana :eval never-exportbsser
#+LATEX_CLASS: varticle
#+LATEX_CLASS_OPTIONS: [11pt,twoside,openany,strict,extrafontsizes,hyphens,table,a4paper,article]
#+INCLUDE: /home/vikas/ssercloud/bibliobase/a4full.org
#+LATEX_HEADER: \setsecheadstyle{\raggedright\large\bfseries}
#+LATEX_HEADER: \setsubsecheadstyle{\raggedright\bfseries}
#+LATEX_HEADER: \renewcommand\thesection{\arabic{section}}
#+LATEX_HEADER: \setcounter\secnumdepth{1}
#+LATEX_HEADER: \setsecnumdepth{subsection}
#+LATEX_HEADER: \setrmarg{3.55em plus 1fil}


* Accounts and permissions

+ Each data user is separately given their authentication details. Please keep them safely and DO NOT share them.
+ Each data user has access to specific tables. If you need access to any additional tables, ask Vikas.

* Create a .pgpass file in your home directory

+ Create a file with the name .pgpass in your home directory with following comments.

  ~localhost:3333:ssersurveydata:myusername:mypassword~

+ Use ~chmod 600 $HOME/.pgpass~ to secure this file.

* Open a database connection

The R code in the Code Block 1 should be kept in a separate .R file that is called in manually when you start your work. To create the file (sserconnect.R) in your working directory, tangle the code block using C-c C-v t. You would need to modify your username in the sserconnect.R file.

You can create a separate code block (such as Code Block 2), and source "sserconnect.R" to run these commands.

When executed, this code creates an ssh tunnel with the server, and then creates a database connection.

We should not be creating multiple ssh tunnels or keeping them alive when we don't need them. Code in Block 1 thus includes commands to first search for any existing tunnels to our server and kill them before creating a new one. The code also includes a .Last function that will be run when you close your R session. This function will disconnect the database and kill any remaining ssh tunnels.

#+NAME: database-connections
#+BEGIN_SRC R :results silent :exports code :tangle "sserconnect.R"
  #  Code Block 1. R code for creating an ssh tunnel and a database connection

  require(RPostgreSQL)
  GrepResults<-system2("ps",c("ax | grep 'ssh -L 3333'| grep 'singdehri'"),
                       stdout=TRUE)
  Processes<-as.numeric(sub(" .*","",GrepResults))
  tools::pskill(Processes)
  system2("ssh", c("-L3333:localhost:5432", "-N", "-T", "singdehri.sser.in"),
          wait=FALSE)
  drv <- dbDriver("PostgreSQL")
  surveypg <- dbConnect(drv, dbname = "ssersurveydata",
                          host = "localhost", port = 3333, user="vaishali")
  .Last <- function() {
      dbDisconnect(surveypg)
      GrepResults<-system2("ps",c("ax | grep 'ssh -L 3333'| grep 'singdehri'"),stdout=TRUE)
      Processes<-as.numeric(sub(" .*","",GrepResults))
      tools::pskill(Processes)
  }

#+END_SRC

#+NAME: connect-server
#+BEGIN_SRC R :results silent :exports code
# Code Block 2. Call sserconnect.R
source("sserconnect.R")
#+END_SRC


* Read data

Commands such as the ones in the Code Block 3 can be used to read data.

#+NAME: read-data-code
#+BEGIN_SRC R :results silent :exports code
  # Code Block 3. Read data from the database

  dbListTables(surveypg)->t # Lists all tables that you can access
  data.table(dbReadTable(surveypg,"ruralsurvey_household"))->household
  data.table(dbReadTable(surveypg,"ruralsurvey_member"))->member
  data.table(dbReadTable(surveypg,"ruralsurvey_codecaste"))->castes
  data.table(dbReadTable(surveypg,"ruralsurvey_codevillage"))->villages
  data.table(dbReadTable(surveypg,"ruralsurvey_coderelationship"))->relationship


  # Use lines below to disconnect the database if you do not need to
  # read data again in this session
  #
  # dbDisconnect(surveypg)
  # GrepResults<-system2("ps",c("ax | grep 'ssh -L 3333'| grep 'singdehri'"),
  #                      stdout=TRUE)
  # Processes<-as.numeric(sub(" .*","",GrepResults))
  # tools::pskill(Processes)

#+END_SRC

